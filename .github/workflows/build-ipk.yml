name: Build sing-box IPK packages

on:
  workflow_dispatch:
    inputs:
      copy:
        description: 'Build all releases'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  prepare-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set-versions.outputs.versions }}
    steps:
      - name: Determine versions
        id: set-versions
        run: |
          if [ "${{ github.event.inputs.copy }}" = "true" ]; then
            versions=$(curl -s "https://api.github.com/repos/SagerNet/sing-box/releases?per_page=100" \
              | jq -r '.[] | select(.prerelease == false) | .tag_name' \
              | grep '^v[0-9]\+' \
              | sed 's/^v//' \
              | awk -F. '($1 == 1 && $2 >= 10)' \
              | sort -V)

            versions_json=$(echo "$versions" | jq -R . | jq -s -c .)
          else
            latest=$(curl -s "https://api.github.com/repos/SagerNet/sing-box/releases/latest" \
              | jq -r 'select(.prerelease == false) | .tag_name' \
              | sed 's/^v//')
            versions_json=$(echo "[\"$latest\"]")
          fi

          echo "Building versions: $versions_json"
          echo "versions=$versions_json" >> $GITHUB_OUTPUT


  build-ipk:
    needs: prepare-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, mipsle]
        version: ${{ fromJson(needs.prepare-versions.outputs.versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y tar gzip jq fakeroot

      - name: Download Sing-box
        id: download
        run: |
          url="https://github.com/SagerNet/sing-box/releases/download/v${{ matrix.version }}/sing-box-${{ matrix.version }}-linux-${{ matrix.arch }}.tar.gz"
          echo "Trying to download $url"

          if curl --head --silent --fail "$url" > /dev/null; then
            wget -q "$url"
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "No release found for version=${{ matrix.version }}, arch=${{ matrix.arch }}"
            echo "found=false" >> $GITHUB_OUTPUT
          fi


      - name: Create IPK package structure
        if: steps.download.outputs.found == 'true'
        run: |
          if [ ! -f "sing-box-${{ matrix.version }}-linux-${{ matrix.arch }}.tar.gz" ]; then
            echo "Archive not found, skipping IPK build for ${{ matrix.version }} ${{ matrix.arch }}"
            exit 0
          fi

          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/sbin
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/sing-box/configs
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/swave
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/var/log/swave
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/var/log/sing-box
          mkdir -p sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL
          
          tar -xzf sing-box-${{ matrix.version }}-linux-${{ matrix.arch }}.tar.gz -C sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/sbin --strip-components=1
          
          cp ./etc/init.d/S99sing-box sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d/S99sing-box
          chmod +x sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/init.d/S99sing-box
          
          # Маппинг arch → Architecture
          case "${{ matrix.arch }}" in
            arm64) arch_pkg="aarch64-3.10" ;;
            mipsle) arch_pkg="mipsel-3.4" ;;
            *) arch_pkg="${{ matrix.arch }}" ;; # fallback
          esac
          
          cat > sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/control <<EOF
          Package: sing-box-tg-installer
          Depends: libc,libssp,librt,libpthread,libpthread,jq,iptables,ca-certificates
          Version: ${{ matrix.version }}
          Architecture: $arch_pkg
          Section: net
          URL: https://sing-box.sagernet.org/
          Description: A minimalistic tool to automate Sing-box setup on Keenetic router systems..
          License: GPL-3.0 license
          Maintainer: for6to9si <for6to9si@gmail.com>
          EOF
          
          cp ./etc/ndm/netfilter.d/000-swave.sh sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d/
          chmod +x sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/ndm/netfilter.d/000-swave.sh
          cp ./etc/swave/settings.json sing-box-${{ matrix.version }}-${{ matrix.arch }}/opt/etc/swave/example.json

      - name: Add postinst script, add policy Swave
        if: steps.download.outputs.found == 'true'
        run: |
          cat > sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postinst <<'EOF'
          #!/bin/sh
          case "$1" in
           configure)
               ndmc -c 'ip policy Swave'
               ndmc -c 'ip policy Swave description Swave'
               ndmc -c 'ip policy Swave permit global ISP'
               ndmc -c 'system configuration save'
           ;;
          esac
          exit 0
          EOF
          chmod 755 sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postinst

      - name: Add postrm script
        if: steps.download.outputs.found == 'true'
        run: |
          cat > sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postrm <<'EOF'
          #!/bin/sh
          case "$1" in
           remove)
               ndmc -c 'ip no policy Swave'
               ndmc -c 'system configuration save'
           ;;
          esac
          exit 0
          EOF
          chmod 755 sing-box-${{ matrix.version }}-${{ matrix.arch }}/CONTROL/postrm

      - name: Include sing-box license and copyright
        if: steps.download.outputs.found == 'true'
        run: |
          cd sing-box-${{ matrix.version }}-${{ matrix.arch }}
          cp opt/sbin/LICENSE CONTROL/
          mv opt/sbin/LICENSE opt/etc/sing-box/
          cd /

      - name: Package IPK
        if: steps.download.outputs.found == 'true'
        run: |
          cd sing-box-${{ matrix.version }}-${{ matrix.arch }}
          fakeroot tar -czf ../data.tar.gz ./opt/sbin ./opt/etc ./opt/var/log/swave ./opt/var/log/sing-box
          cd ./CONTROL
          fakeroot tar -czf ../../control.tar.gz *
          cd ..
          echo "2.0" > ../debian-binary
          cd ..
          fakeroot tar -czf sing-box_${{ matrix.version }}_${{ matrix.arch }}.ipk ./debian-binary ./control.tar.gz ./data.tar.gz

      - name: Upload artifacts
        if: steps.download.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-${{ matrix.version }}-${{ matrix.arch }}
          path: ./*.ipk
          if-no-files-found: error

  deploy-repository:
    runs-on: ubuntu-latest
    needs: [build-ipk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        run: |
          # Найдём предыдущий тег по дате создания
          PREV_TAG=$(git tag --sort=creatordate | tail -n 2 | head -n 1 || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Logging all history."
            git log --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          else
            echo "Generating changelog from $PREV_TAG to HEAD"
            git log "$PREV_TAG"..HEAD --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          fi
          
          #echo "Copied build from XTLS/Sing-box" > changelog.txt

          echo "Changelog:"
          cat changelog.txt

      - name: Create releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Группируем артефакты по версии
          for ver in $(ls artifacts/*/sing-box_*.ipk | sed -E 's/.*sing-box_([0-9.]+)_.*/\1/' | sort -u); do
            tag="v$ver"
            files=$(ls artifacts/*/sing-box_${ver}_*.ipk)

            echo "Creating release $tag with files: $files"

            if [ "${{ github.event.inputs.copy }}" = "true" ]; then
              gh release create "$tag" $files \
                --repo "$GITHUB_REPOSITORY" \
                --title "Release $tag (copied)" \
                --notes-file changelog.txt || echo "Release $tag already exists"
            else
              gh release create "$tag" $files \
                --repo "$GITHUB_REPOSITORY" \
                --title "Release $tag" \
                --notes-file changelog.txt || echo "Release $tag already exists"
            fi
          done

